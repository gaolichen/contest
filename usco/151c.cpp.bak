
/*
ID:  mygali1
PROG: starry
*/

#define WIN32
#ifdef WIN32
#	pragma warning(disable:4786)
#define for if(0);else for
#endif
#include <iostream>
#include <vector>
#include <string>
#include <deque>
#include <map>
#include <set>
#include <list>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <cmath>
using namespace std;

//64 bit integer definition
#ifdef WIN32
#define in_routine(type,spec) \
istream& operator>>(istream& s,type &d){char b[30];s>>b;sscanf(b,spec,&d);return s;}
#define out_routine(type,spec) \
ostream& operator<<(ostream& s,type d){char b[30];sprintf(b,spec,d);s<<b;return s;}
typedef signed __int64 i64; in_routine(i64,"%I64d") out_routine(i64,"%I64d")
typedef unsigned __int64 u64; in_routine(u64,"%I64u") out_routine(u64,"%I64u")
#else
typedef signed long long i64;
typedef unsigned long long u64;
#endif

//common routines
#ifdef WIN32
#define min(a,b) _cpp_min(a,b)
#define max(a,b) _cpp_max(a,b)
#endif
#define abs(a) ((a)>0?(a):-(a))
#define mit(a,b) map<a,b>::iterator
#define fr(a,b) for(int a=0;a<(b);a++)
#define foreach(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i) 
#define all(a) a.begin(),a.end()
#define inmat(i,j,m,n) ((i)>=0&&(i)<(m)&&(j)>=0&&(j)<(n))
#define cls(a) memset((a),0,sizeof(a))
#define isCap(a) ((a)>='A'&&(a)<='Z')
#define isLow(a) ((a)>='a'&&(a)<='z')
#define inf 2100000000
#define eps 1e-8
typedef vector<int> VI; typedef vector<vector<int> > VVI;
typedef vector<i64> V64; typedef vector<vector<i64> > VV64;
typedef vector<string> VS; typedef vector<vector<string> > VVS;
typedef vector<double> VD; typedef vector<vector<double> > VVD;
int mx[8]={0,1,0,-1,1,1,-1,-1};
int my[8]={1,0,-1,0,1,-1,-1,1};
template <class T>
T gcd(T a,T b){for(T c;b;c=a,a=b,b=c%b);return a;}
template <class T>
T lcm(T a,T b){return a/gcd(a,b)*b;}

template <class T>
void remove(vector<T>&v,const T&e){
	v.resize(remove(v.begin(),v.end(),e)-v.begin());
}
template <class T>
void insert(vector<T>&v,int isnum,const T&e){
	v.resize(v.size()+1);
	for(int i=v.size()-1;i>isnum;v[i--]=v[i-1]);
	v[isnum]=e;
}
void insert(string &s,int isnum,const string&is){
string t=s;s.resize(isnum);s+=is+(t.c_str()+isnum);
}
template <class T>
ostream& operator<<(ostream& s,vector<T> d){
	s<<"{";
	for (typename vector<T>::iterator i=d.begin();i!=d.end();i++)
		s<<(i!=d.begin()?",":"")<<*i;
	s<<"}";
	return s;
}

//parsing routine
vector<string > parse(const string &s,const string &delim){
	vector<string > ret(0);
	for (int b,e=0;;ret.push_back(s.substr(b,e-b)))
		if ((b=s.find_first_not_of(delim,e))==(e=s.find_first_of(delim,b)))
			return ret;
}

VS mat;
map<VS,char> mv;
char cnt;
int maxx,minx,maxy,miny;

void calc(VS &tmp){
	VS ret(tmp[0].length(),string(tmp.size(),'0'));
	fr(i,tmp.size())fr(j,tmp[i].length()){
		int x=-j+tmp[i].length()-1;int y=i;
		ret[x][y]=tmp[i][j];
	}
	tmp=ret;
}

char get(VS &tmp){
	VS ans=tmp;
	fr(i,4){
		calc(tmp);
		if(tmp>ans)ans=tmp;
	}
	fr(i,tmp.size())reverse(all(tmp[i]));
	fr(i,4){
		calc(tmp);
		if(tmp>ans)ans=tmp;
	}
//	cout<<ans<<endl;
	if(mv.find(ans)!=mv.end())return mv[ans];
	mv[ans]=cnt++;
	return mv[ans];
}

void dfs(int x,int y,char ch){
	if(!inmat(x,y,mat.size(),mat[0].length()))return ;
	if(mat[x][y]=='0'||mat[x][y]==ch)return ;
	mat[x][y]=ch;
	maxy=max(y,maxy);miny=min(miny,y);
	maxx=max(x,maxx);minx=min(minx,x);
	fr(i,8)dfs(x+mx[i],y+my[i],ch);
}
void run(){
	cnt='a';
	mv.clear();
//	cout<<"a"<<endl;
	fr(i,mat.size())fr(j,mat[i].length())if(mat[i][j]=='1'){
		maxx=0;minx=mat.size();maxy=0;miny=mat[0].length();
//		cout<<maxx<<' '<<minx<<endl;
		dfs(i,j,'*');
		VS tmp;
//		cout<<"haha"<<endl;
//		cout<<maxx<<' '<<minx<<endl;
		tmp.resize(maxx+1-minx);
		for(int k=minx;k<=maxx;k++){
			for(int h=miny;h<=maxy;h++)if(mat[k][h]=='*')tmp[k-minx]+='*';
			else tmp[k-minx]+='0';
		}
//		cout<<"wuwu"<<endl;
		char ch=get(tmp);
//		cout<<"hehe"<<endl;
		dfs(i,j,ch);
	}
//	cout<<"b"<<endl;
	ofstream cout("starry.out");
//	cout<<endl;
	fr(i,mat.size())cout<<mat[i]<<endl;
}
int main(){
	int w,h;
	ifstream cin("starry.in");
	while(cin>>w>>h){
		mat.clear();mat.resize(h);
		fr(i,h){
			cin>>mat[i];
		}
		run();
	}
	return 0;	
}